import scipy.io
import pandas as pd
import numpy as np

# Load fMRI data
mat_nb = scipy.io.loadmat('E:/Brain_Develop_Knock/KARIM and ME/nback_fmri_power264.mat')
fmri_data = mat_nb.get('nback_fmri_power264')[0]

# Load phenotype data
pheno_data = pd.read_excel('E:/Brain_Develop_Knock/KARIM and ME/upenn_meta_cnb.xlsx')
subj_id_pheno = pheno_data['subject id']

# Load p264 template
p264_template = pd.read_excel('E:/Brain_Develop_Knock/KARIM and ME/PP264_template_subnet.xls', header=0)

# Initialize a list to store correlation features for each subnetwork
correlation_features_per_subnet = []

# Initialize lists to store correlation features for each subnet and age
correlation_features_per_subnet = [[] for _ in range(14)]  # Initialize a list for each subnet
age_in_month_subnet = []  # Initialize age_in_month_subnet as a list

# Iterate through subjects
for subj_count in range(len(mat_nb.get('nback_fmri_power264')[0])):
    print(f"SUBJ_COUNT is: {subj_count}")

    subj_id_nb = fmri_data[subj_count][0][0][0][0][0]

    # Check if subject is present in pheno_data
    if subj_id_nb in subj_id_pheno.values:
        # Get age of the subject in months
        subj_age_in_month = np.array(mat_nb.get('nback_fmri_power264')[0][subj_count][0][0][0][1])

        # Extract bold signals for all 264 regions
        bold_signals_all_regions = fmri_data[subj_count][2]

        # Compute Pearson correlation for all regions without transposing
        correlation_matrix_all_regions = np.corrcoef(bold_signals_all_regions)

        # Iterate through subnetwork columns
        for subnet_count in range(1, 15):
            # Get subnet indices from p264_template
            subnet_inds = p264_template[p264_template['subnet_inds'] == subnet_count]['Original_ROI'].values - 1

            print(f"subj_count: {subj_count}, subnet_count: {subnet_count}, subnet_inds: {subnet_inds}")

            # Extract values before the diagonal element for the current subnet
            values_before_diagonal = [
                correlation_matrix_all_regions[i, subnet_col] for subnet_col in subnet_inds for i in range(subnet_col)
            ]

            print(f"Shape of values_before_diagonal: {len(values_before_diagonal)}")

            # Append the list for the current subnet with values_before_diagonal
            correlation_features_per_subnet[subnet_count - 1].append(values_before_diagonal)

            print(f"Shape of correlation_features_per_subnet{subnet_count}: {len(correlation_features_per_subnet[subnet_count - 1])}")

        # Store age in months for the current subject
        age_in_month_subnet.append(subj_age_in_month)

# Convert the lists of lists to a list of 2D NumPy arrays for further analysis
correlation_features_per_subnet = [np.array(features) for features in correlation_features_per_subnet]
age_in_month_subnet = np.array(age_in_month_subnet)

# Print shapes
for i, features in enumerate(correlation_features_per_subnet, start=1):
    print(f"Shape of correlation_features_per_subnet{i}: {features.shape}")

print(f"Shape of age_in_month_subnet: {age_in_month_subnet.shape}")
